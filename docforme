#!/bin/bash

# This will add a documentation block to all CRUD methods.

function getParam {
	parameter=$1
	parameter=${parameter#*form[\'}
	parameter=${parameter%%\']*}
	echo -e "$parameter"
}

function getSuccess {
	success=$1
	success=${success#*\'}
	success=${success%%\'*}
	echo -e "$success"
}

function getApiParams {

	count=0

	while read line
	do		
		while [[ $line ==  *"form['"* && $line != "//"* ]] 
		do
			parameter="["$(getParam "$line")"]"
			if [ ${#paramsArray[@]} -eq 0 ]; then
				if [[ "$parameter" != "[object]" && "$parameter" != "[action]" ]]; then
					paramsArray[$count]=$parameter
					count=$((count+1))
				fi
			else
				if [[ "$parameter" != "[object]" && "$parameter" != "[action]" ]]; then
					for j in "${paramsArray[@]}"
					do
						if [ "$parameter" == $j ]; then
							break
						else

							if [ "${paramsArray[$count-1]}" == $j ]; then
								paramsArray[$count]=$parameter
								count=$((count+1))
							fi
						fi
					done
				fi
			fi
			line=${line#*form[\'}
		done
	done < $1
}

function getApiSuccess {
	
	count=0
	
	while read lineGAS
	do
		if [[ $lineGAS == *"=>"* && $lineGAS != "//"* ]]; then
			success=$(getSuccess "$lineGAS")
			successArray[$count]=$success
			count=$((count+1))
		fi
	done < $1
}

function setOptionalParams {

	backwfile=$(tac $1)
	echo -ne "$backwfile" >> backwardsfile

	redirects=()
	redirectsSize=0
	linenumber=1
	while read lineSOP
	do

		if [[ $lineSOP == *"400"* ]]; then
			redirects[$redirectsSize]=$linenumber
			redirectsSize=$((redirectsSize+1))
		fi
		linenumber=$((linenumber+1))
	done < backwardsfile

	
	for g in "${redirects[@]}"
	do
		linenumber=1
		readcode="off"
		alloptional="false"
		bracketlevel=0
		redirectbracketlvl=0
		while read lineSOP
		do
			if [[ $lineSOP == *"}"* ]]; then
				bracketlevel=$((bracketlevel+1))
			fi
			if [[ $linenumber == $g ]]; then
				readcode="on"
				redirectbracketlvl=$((bracketlevel-1))
			fi
			if [[ $readcode == "on" ]]; then

				#check if redirect is in a single line conditional statement
				if [[ $linenumber -eq $((g+1)) ]]; then
					if [[ $lineSOP == *"else"* || $lineSOP == *"if"* ]]; then
						redirectbracketlvl=$((redirectbracketlvl+1))
					fi
				fi

				if [[ $lineSOP == *"else"*"if"* ]]; then
					alloptional="true"
				fi

				if [[ $alloptional != "true" ]]; then
						for ((h=0; h<${#paramsArray[@]}; h++));
						do
							paramcopy=${paramsArray[$h]#[}
							paramcopy=${paramcopy%]}
							if [[ $lineSOP == *"isset(\$form['"$paramcopy"'])"* ]]; then
								paramsArray[$h]=$paramcopy
							fi
						done
				fi

				if [[ $lineSOP == *"if ("* && $lineSOP != *"else"* && $bracketlevel -eq $redirectbracketlvl ]]; then
					readcode="off"
				fi
			fi

			if [[ $lineSOP == *"{"* ]]; then
				bracketlevel=$((bracketlevel-1))
			fi

			linenumber=$((linenumber+1))
		done < backwardsfile
	done

	rm backwardsfile
}

function readModel {
	directory=$(dirname $(dirname $(readlink -f $1)))"/Model"
	mfilename="${1^}"".php"
	mfile=$(find $directory -name "$mfilename*")
	
	linenumberRM=1
	begRM="null"
	endRM="null"
	while read lineRM
	do
		if [[ $lineRM == *"schemaApiToDb"* ]]; then
			begRM=$linenumberRM
		fi
		
		if [ "$begRM" != "null" ]; then
			if [[ $lineRM == *");"* ]]; then
				endRM=$linenumberRM
			fi
		fi
		
		if [ "$begRM" != "null" -a "$endRM" != "null" ]; then
			copyrequestRM=$begRM","$endRM"w dfmtemp"
			sed -n "$copyrequestRM" $mfile
			getApiSuccess dfmtemp
			rm dfmtemp

			break
		fi
		linenumberRM=$((linenumberRM+1))
	done < $mfile

}

function createDocBlock {
	objectName=$1 #disposition
	actionName=${2%_*}  #read_disposition-> read
	apiGroup="${1^}"  #Disposition
	description=$actionName' '$apiGroup's'
	description="${description^}" #Read Dispositions
	apiName=$actionName$apiGroup
	apiName="${apiName^}"  #ReadDisposition

	echo -ne '	/**\n' >> $3
	echo -ne '	 * @api {post} ?object='"$objectName"'&action='"$actionName"' '"$description"'\n' >> $3
	echo -ne '	 * @apiName '"$apiName"'\n' >> $3
	echo -ne '	 * @apiGroup '"$apiGroup"'\n' >> $3
	echo -ne '	 * @apiHeader {String} Authorization Authorization value. Generally "Bearer ACCESSTOKEN".\n' >> $3

	for j in "${paramsArray[@]}"
	do
	echo -ne '	 * @apiParam {String} '"$j"'\n' >> $3
	done
	
	if [[ "$actionName" == "update"* ]]; then

		for j in "${successArray[@]}"
		do
			updateParamUnique="true"
			for k in "${paramsArray[@]}"
			do
				if [[ $k == "["*"]" ]]; then
					jcopy="["$j"]"
					if [ "$jcopy" = "$k" ]; then
						updateParamUnique="false"
						break
					fi
				else
					if [ "$jcopy" = "$k" ]; then
						updateParamUnique="false"
						break
					fi
				fi
			done

			if [[ $updateParamUnique == "true" ]];then
					echo -ne '	 * @apiParam {String} ['"$j"']\n' >> $3
			fi

		done
	fi

	if [[ "$actionName" == "count"* ]]; then
	echo -ne '	 * @apiSuccess {String} total	Total number of '"$apiGroup"'s in the specified domain.\n' >> $3 
	fi

	if [[ "$actionName" == "read"* ]]; then
	for j in "${successArray[@]}"
	do
	echo -ne '	 * @apiSuccess {String} '"$j"'\n' >> $3
	done
	fi
	
	echo -ne '	 * @apiPermission Reseller\n' >> $3
	echo -ne '	 * @apiSampleRequest ?format=json&object='"$objectName"'&action='"$actionName"'\n' >> $3
	echo -ne '	 */\n' >> $3
}

function main {
	IFS=''

	ControllerGroup=$(findControllerGroup "$1")
	apiGroupFile="${ControllerGroup^}""Controller.php"
	ControllerGroup=${ControllerGroup%s}

	getFuncNames $1 $apiGroupFile $ControllerGroup

	for i in "${functionNames[@]}"
	do
		linenumber=1
		beg="null"
		end="null"
		functionfound="false"
		mbracketlevel=0

		while read line
		do
			if [[ $line == *"{"* ]]; then
				mbracketlevel=$((mbracketlevel+1))
			fi

			if [[ $line == *"function "$i"("* ]]; then
				beg=$linenumber
			fi
		
			if [ $functionfound == "true" ]; then
				copyrequest=$beg","$end"w dfmtemp"
				sed -n "$copyrequest" $apiGroupFile
				getApiParams dfmtemp
				setOptionalParams dfmtemp
				rm dfmtemp

				if [[ $i == "read"* || $i == "update"* ]]; then
					readModel $1
				fi
				
				createDocBlock $1 $i dfmtemp
			
				insertlineno=$((beg-1))
				sed -i "${insertlineno}r dfmtemp" $apiGroupFile
			
				rm dfmtemp
				break
			fi

			if [[ $line == *"}"* ]]; then
				mbracketlevel=$((mbracketlevel-1))

				if [[ "$beg" != "null" && $mbracketlevel -eq 1 ]]; then
					functionfound="true"
					end=$linenumber
				fi
			fi
			linenumber=$((linenumber+1))
		done < $apiGroupFile

		unset paramsArray
		unset successArray
	done
}

function getFuncName {
	func=$1
	func=${func#*this->}
	func=${func%%(\$form)*}
	echo -e "$func"
} 

function getFuncNames {
	IFS=''

	count=0

	for iMain in "${CRUDmethods[@]}"
	do
		linenumber=1

		CRUDmethodfound="false"
		mbracketlevel=0
		condbracketlvl="null"
		noreroutes="true"

		while read lineMain
		do
			if [[ $lineMain == *"{"* ]]; then
				mbracketlevel=$((mbracketlevel+1))
			fi

			if [[ $lineMain == *"}"* ]]; then
				mbracketlevel=$((mbracketlevel-1))

				if [[ $CRUDmethodfound == "true" && $mbracketlevel -eq 1 ]]; then
					#Ensures only the necessary CRUD methods are added (ex. disposition doesn't have a 'create' function)
					if [[ $noreroutes == "true" && "$1" == "$3" ]]; then
						functionNames[$count]=$iMain
						count=$((count+1))
					fi
					break
				fi
			fi

			if [[ $lineMain == *"function "$iMain"("* ]]; then
				CRUDmethodfound="true"
			fi

			if [[ $CRUDmethodfound == "true" ]]; then

				#could cause problems if theres is nested form['object']=='blah'
				if [[ $lineMain == *"form['object']"*"=="*'"'$1'"'* || $lineMain == *"form['object']"*"=="*"'"$1"'"* ]]; then
					condbracketlvl=$mbracketlevel
				fi

				if [[ $condbracketlvl != "null" && $mbracketlevel -ge $condbracketlvl ]]; then
					if [[ $lineMain == *"this->"$iMain"_"* ]]; then
						funcName=$(getFuncName "$lineMain")
						funcNameUnique="true"

						#Make sure function name is unique and plural form
						for ((h=0; h<${#functionNames[@]}; h++))
						do
							if [[ $funcName == "${functionNames[$h]}" || $funcName"s" == "${functionNames[$h]}" ]]; then
								funcNameUnique="false"
							fi
							if [[ $funcName == "${functionNames[$h]}""s" ]]; then
								unset functionNames[$h]
							fi
						done
						if [[ $funcNameUnique == "true" ]]; then
							functionNames[$count]=$funcName
							count=$((count+1))
							noreroutes="false"
						fi	
					fi
				fi

				if [[ $condbracketlvl != "null" && $mbracketlevel -lt $condbracketlvl ]]; then
					condbracketlvl="null"
				fi

			fi

			linenumber=$((linenumber+1))
		done < $2
	done
}

function getApiGroup {
	apiGroup=$1
	apiGroup=${apiGroup#*=> \'}
	apiGroup=${apiGroup%%\'*,\'action*}
	echo -e "$apiGroup"
}

function findControllerGroup {
	IFS=''

	readCase="off"
	while read lineFCG
	do
		if [[ $lineFCG == *'case "'$1'":'* ]]; then
			readCase="on"
		fi

		if [[ $readCase == "on" ]]; then
			if [[ $lineFCG == *"requestAction(array('controller' =>"* ]]; then
				apiGroup=$(getApiGroup "$lineFCG")
				echo "$apiGroup"
				break
			fi
		fi

	done < ApisController.php
}

paramsArray=()
successArray=()
functionNames=()

#these are the base functions to document for an api group
CRUDmethods=('count' 'create' 'read' 'update' 'delete')

main $1

echo "API Group: ""$1"
echo "Methods Documented: ""${functionNames[@]}"